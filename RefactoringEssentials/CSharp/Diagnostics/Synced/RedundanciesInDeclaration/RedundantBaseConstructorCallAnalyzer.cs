using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using System.Collections.Immutable;

namespace RefactoringEssentials.CSharp.Diagnostics
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class RedundantBaseConstructorCallAnalyzer : DiagnosticAnalyzer
    {
        private static readonly DiagnosticDescriptor descriptor = new DiagnosticDescriptor(
            CSharpDiagnosticIDs.RedundantBaseConstructorCallAnalyzerID,
            GettextCatalog.GetString("This is generated by the compiler and can be safely removed"),
            GettextCatalog.GetString("Redundant base constructor call"),
            DiagnosticAnalyzerCategories.RedundanciesInDeclarations,
            DiagnosticSeverity.Info,
            isEnabledByDefault: true,
            helpLinkUri: HelpLink.CreateFor(CSharpDiagnosticIDs.RedundantBaseConstructorCallAnalyzerID),
            customTags: DiagnosticCustomTags.Unnecessary
        );

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(descriptor);

        public override void Initialize(AnalysisContext context)
        {
            context.RegisterSyntaxNodeAction(
                (nodeContext) =>
                {
                    Diagnostic diagnostic;
                    if (TryGetDiagnostic(nodeContext, out diagnostic))
                    {
                        nodeContext.ReportDiagnostic(diagnostic);
                    }
                },
                SyntaxKind.ConstructorDeclaration
            );
        }

        private static bool TryGetDiagnostic(SyntaxNodeAnalysisContext nodeContext, out Diagnostic diagnostic)
        {
            diagnostic = default(Diagnostic);
            if (nodeContext.IsFromGeneratedCode())
                return false;

            var constructorDeclaration = nodeContext.Node as ConstructorDeclarationSyntax;
            if (constructorDeclaration?.Initializer?.ArgumentList.Arguments.Count != 0)
                return false;

            if (!constructorDeclaration.Initializer.IsKind(SyntaxKind.BaseConstructorInitializer))
                return false;

            var baseInitializer = constructorDeclaration.Initializer;
            if (baseInitializer.ArgumentList == null ||
                baseInitializer.ArgumentList != null && baseInitializer.ArgumentList.Arguments.Count<1)
            {
                diagnostic = Diagnostic.Create(descriptor, constructorDeclaration.GetLocation());
                return true;
            }
            return false;
        }

        //		class GatherVisitor : GatherVisitorBase<RedundantBaseConstructorCallAnalyzer>
        //		{
        //			public GatherVisitor(SemanticModel semanticModel, Action<Diagnostic> addDiagnostic, CancellationToken cancellationToken)
        //				: base (semanticModel, addDiagnostic, cancellationToken)
        //			{
        //			}

        ////			public override void VisitConstructorDeclaration(ConstructorDeclaration constructorDeclaration)
        ////			{
        ////				base.VisitConstructorDeclaration(constructorDeclaration);
        ////
        ////				if (constructorDeclaration.Initializer.ConstructorInitializerType != ConstructorInitializerType.Base)
        ////					return;
        ////				if (constructorDeclaration.Initializer.IsNull)
        ////					return;
        ////				if (constructorDeclaration.Initializer.Arguments.Count != 0)
        ////					return;
        ////				AddDiagnosticAnalyzer(new CodeIssue(constructorDeclaration.Initializer.StartLocation, constructorDeclaration.Initializer.EndLocation,
        ////				         ctx.TranslateString(""),
        ////				         ctx.TranslateString(""),
        ////				         script => {
        ////					var clone = (ConstructorDeclaration)constructorDeclaration.Clone();
        ////					script.Replace(clone.ColonToken, CSharpTokenNode.Null.Clone());
        ////					script.Replace(constructorDeclaration.Initializer, ConstructorInitializer.Null.Clone());
        ////					}) { IssueMarker = IssueMarker.GrayOut });
        ////			}
        ////
        ////			public override void VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration)
        ////			{
        ////				//ignore properties
        ////			}
        ////
        ////			public override void  VisitFieldDeclaration(FieldDeclaration fieldDeclaration)
        ////			{
        ////				//ignore fields
        ////			}
        ////
        ////			public override void VisitMethodDeclaration(MethodDeclaration methodDeclaration)
        ////			{
        ////				//ignore method declarations
        ////			}
        //		}
    }
}

public class Human
{
    private string name;

    public Human()
    {
    }

    public Human(string name)
    {
        this.name = name;
    }
}

public class Person : Human
{
    public Person() : base()
    {
        
    }
}